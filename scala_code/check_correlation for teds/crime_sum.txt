import org.apache.spark.ml.Pipeline
import org.apache.spark.ml.feature.VectorAssembler
import org.apache.spark.ml.regression.{LinearRegression, LinearRegressionModel}
import org.apache.spark.ml.evaluation.RegressionEvaluator
import org.apache.spark.ml.regression.LinearRegression
import org.apache.spark.ml.tuning.{ParamGridBuilder, TrainValidationSplit}
import org.apache.log4j._
import org.apache.spark.ml.feature.VectorAssembler
import org.apache.spark.mllib.linalg.Vectors



val crime =  sqlContext.sql("select * from tcm390.crime")


val teds =  sqlContext.sql("select * from tcm390.TEDS")


teds.toDF().registerTempTable("teds")

crime.toDF().registerTempTable("crime")

sqlContext.sql("SELECT corr(frequency,number) from teds, crime where teds.state= crime.state AND teds.state='NY' AND teds.year=crime.year AND NOT(crime.number IS null)").show()


val a=sqlContext.sql("SELECT frequency,number from teds, crime where teds.state= crime.state AND teds.state='NY' AND teds.year=crime.year AND NOT(crime.number IS null)")


val a3 = a.selectExpr("cast(frequency as double) frequency", "cast(number as double) number")


val a1 = a3.select(a3("frequency").as("label"),$"number")

val assembler = new VectorAssembler().setInputCols(Array("number")).setOutputCol("features")

val a2 = assembler.transform(a1).select($"label",$"features")

val lr = new LinearRegression()

val lrModel = lr.fit(a2)
println(s"Coefficients: ${lrModel.coefficients} Intercept: ${lrModel.intercept}")


val trainingSummary = lrModel.summary
println(s"numIterations: ${trainingSummary.totalIterations}")
println(s"objectiveHistory: ${trainingSummary.objectiveHistory.toList}")

trainingSummary.residuals.show()

println(s"RMSE: ${trainingSummary.rootMeanSquaredError}")
println(s"MSE: ${trainingSummary.meanSquaredError}")
println(s"r2: ${trainingSummary.r2}")




val features = new VectorAssembler().setInputCols(Array("number")).setOutputCol("features")

val lr = new LinearRegression().setLabelCol("frequency")

val pipeline = new Pipeline().setStages(Array(features, lr))

val model = pipeline.fit(a3)

val linRegModel = model.stages(1).asInstanceOf[LinearRegressionModel]
println(s"RMSE:  ${linRegModel.summary.rootMeanSquaredError}")
println(s"r2:    ${linRegModel.summary.r2}")
println(s"Model: Y = ${linRegModel.coefficients(0)} * X + ${linRegModel.intercept}")

linRegModel.summary.residuals.show()

val result = model.transform(a3).select("number", "frequency", "prediction")
result.show()