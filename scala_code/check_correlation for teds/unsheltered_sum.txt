import org.apache.spark.ml.Pipeline
import org.apache.spark.ml.feature.VectorAssembler
import org.apache.spark.ml.regression.{LinearRegression, LinearRegressionModel}
import org.apache.spark.ml.evaluation.RegressionEvaluator
import org.apache.spark.ml.regression.LinearRegression
import org.apache.spark.ml.tuning.{ParamGridBuilder, TrainValidationSplit}
import org.apache.log4j._
import org.apache.spark.ml.feature.VectorAssembler
import org.apache.spark.mllib.linalg.Vectors



val homeless =  sqlContext.sql("select * from tcm390.homeless")


val teds =  sqlContext.sql("select * from tcm390.TEDS")


teds.toDF().registerTempTable("teds")

homeless.toDF().registerTempTable("homeless")

sqlContext.sql("SELECT corr(frequency,unsheltered) from teds, homeless where teds.state= homeless.state AND teds.state='NY' AND teds.year=homeless.year AND NOT(homeless.unsheltered IS null)").show()


val a=sqlContext.sql("SELECT frequency,unsheltered from teds, homeless where teds.state= homeless.state AND teds.state='NY' AND teds.year=homeless.year AND NOT(homeless.unsheltered IS null)")


val a3 = a.selectExpr("cast(frequency as double) frequency", "cast(unsheltered as double) unsheltered")


val a1 = a3.select(a3("frequency").as("label"),$"unsheltered")

val assembler = new VectorAssembler().setInputCols(Array("unsheltered")).setOutputCol("features")

val a2 = assembler.transform(a1).select($"label",$"features")

val lr = new LinearRegression()

val lrModel = lr.fit(a2)
println(s"Coefficients: ${lrModel.coefficients} Intercept: ${lrModel.intercept}")


val trainingSummary = lrModel.summary
println(s"numIterations: ${trainingSummary.totalIterations}")
println(s"objectiveHistory: ${trainingSummary.objectiveHistory.toList}")

trainingSummary.residuals.show()

println(s"RMSE: ${trainingSummary.rootMeanSquaredError}")
println(s"MSE: ${trainingSummary.meanSquaredError}")
println(s"r2: ${trainingSummary.r2}")




val features = new VectorAssembler().setInputCols(Array("unsheltered")).setOutputCol("features")

val lr = new LinearRegression().setLabelCol("frequency")

val pipeline = new Pipeline().setStages(Array(features, lr))

val model = pipeline.fit(a3)

val linRegModel = model.stages(1).asInstanceOf[LinearRegressionModel]
println(s"RMSE:  ${linRegModel.summary.rootMeanSquaredError}")
println(s"r2:    ${linRegModel.summary.r2}")
println(s"Model: Y = ${linRegModel.coefficients(0)} * X + ${linRegModel.intercept}")

linRegModel.summary.residuals.show()

val result = model.transform(a3).select("unsheltered", "frequency", "prediction")
result.show()