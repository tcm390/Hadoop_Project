import org.apache.spark.ml.Pipeline
import org.apache.spark.ml.feature.VectorAssembler
import org.apache.spark.ml.regression.{LinearRegression, LinearRegressionModel}
import org.apache.spark.ml.evaluation.RegressionEvaluator
import org.apache.spark.ml.regression.LinearRegression
import org.apache.spark.ml.tuning.{ParamGridBuilder, TrainValidationSplit}
import org.apache.log4j._
import org.apache.spark.ml.feature.VectorAssembler
import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.ml.classification.LogisticRegression


val mh =  spark.sql("select * from tcm390.mh")
val crime =  spark.sql("select * from tcm390.testcrime2015")
val education =  spark.sql("select * from tcm390.testeducation2015")
val unemploy =  spark.sql("select * from tcm390.testunemploy2015")
val homeless =  spark.sql("select * from tcm390.testhomeless2015")


mh.toDF().registerTempTable("mh")
crime.toDF().registerTempTable("crime")
education.toDF().registerTempTable("education")
unemploy.toDF().registerTempTable("unemploy")
homeless.toDF().registerTempTable("homeless")

val freq2015 =  spark.sql("select * from tcm390.freq2015")
freq2015.toDF().registerTempTable("freq2015")

spark.sql("select corr(number,serv) from freq2015, mh where sub1=2 AND (freq2015.state='CT' OR freq2015.state='ME' OR freq2015.state='MA' OR freq2015.state='NH' OR freq2015.state='NJ' OR freq2015.state='NY' OR freq2015.state='RI' OR freq2015.state='VT' OR freq2015.state='DE' OR freq2015.state='MD') AND mh.state=freq2015.state AND NOT(serv=-9.0)").show

spark.sql("select corr(arrest,serv) from freq2015 where sub1=2 AND (freq2015.state='CT' OR freq2015.state='ME' OR freq2015.state='MA' OR freq2015.state='NH' OR freq2015.state='NJ' OR freq2015.state='NY' OR freq2015.state='RI' OR freq2015.state='VT' OR freq2015.state='DE' OR freq2015.state='MD') AND NOT(serv=-9.0) AND NOT(arrest=-9.0)").show


val a=spark.sql("select freq1,age,employ,serv, sheltered, college, crime.number,mh.number from freq2015, homeless, education, crime, mh where sub1=2 AND (freq2015.state='CT' OR freq2015.state='ME' OR freq2015.state='MA' OR freq2015.state='NH' OR freq2015.state='NJ' OR freq2015.state='NY' OR freq2015.state='RI' OR freq2015.state='VT' OR freq2015.state='DE' OR freq2015.state='MD') AND freq2015.state=homeless.state AND freq2015.state=education.state AND freq2015.state=crime.state AND freq2015.state=mh.state AND NOT(freq1=-9) AND NOT(serv=-9.0) AND NOT(age=-9.0) AND NOT(employ=-9)")
val a3 = a.selectExpr("cast(freq1 as double) freq1", "cast(age as double) age", "cast(employ as double) employ", "cast(serv as double) serv", "cast(sheltered as double) sheltered", "cast(college as double) college", "cast(crime.number as double) cnumber" , "cast(mh.number as double) mnumber")
val a1 = a3.select(a3("serv").as("label"),$"freq1",$"age",$"employ",$"sheltered",$"college",$"cnumber", $"mnumber")
val assembler = new VectorAssembler().setInputCols(Array("freq1","age","employ","sheltered","college","cnumber","mnumber")).setOutputCol("features")
val a2 = assembler.transform(a1).select($"label",$"features")
val lr = new LogisticRegression().setFamily("multinomial")
val lrModel = lr.fit(a2)

val result = lrModel.transform(a2).select("features","label","prediction")
result.show(500)

val trainingSummary = lrModel.summary




val accuracy = trainingSummary.accuracy
val falsePositiveRate = trainingSummary.weightedFalsePositiveRate
val truePositiveRate = trainingSummary.weightedTruePositiveRate
val fMeasure = trainingSummary.weightedFMeasure
val precision = trainingSummary.weightedPrecision
val recall = trainingSummary.weightedRecall
